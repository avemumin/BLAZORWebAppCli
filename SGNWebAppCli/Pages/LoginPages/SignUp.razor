@page "/signup"
@using SGNWebAppCli.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUserService userService
@implements IDisposable

<EditForm EditContext="@_editContext" OnValidSubmit="@RegisterUser">
    <DataAnnotationsValidator />
    <ValidationSummary style="@displaySummary" />
    <div>
        <h3 style="font-weight:bold; color:purple">Rejestracja</h3>
    </div>
    <div>
        <br />
    </div>
    <div class="col-12 row">
        <InputText class="form-control col-12"
                   @bind-Value="_userEditCntx.UserName" placeholder="imię" />
        <ValidationMessage For="@(() => _userEditCntx.UserName)" />
    </div>
    <br />
    <div class="col-12 row">
        <InputText class="form-control col-12"
                   @bind-Value="_userEditCntx.UserLastName" placeholder="nazwisko" />
        <ValidationMessage For="@(() => _userEditCntx.UserLastName)" />
    </div>
    <br />
    <div class="col-12 row">
        <InputText class="form-control col-12"
                   @bind-Value="_userEditCntx.UserEmailAddress" placeholder="email" />
        <ValidationMessage For="@(() => _userEditCntx.UserEmailAddress)" />
    </div>
    <br />
    <div class="col-12 row">
        <InputText class="form-control col-12"
                   @bind-Value="_userEditCntx.ConfirmEmailAddress" placeholder="powtórz email" />
        <ValidationMessage For="@(() => _userEditCntx.ConfirmEmailAddress)" />
    </div>
    <br />
    <div class="col-12 row">
        <InputText class="form-control col-12" type="password"
                   @bind-Value="_userEditCntx.UserPassword" placeholder="hasło  min. 8 znaków mała duża litera cyfra znak specjalny" />
        <ValidationMessage For="@(() => _userEditCntx.UserPassword)" />
    </div>
    <br />
    <div class="col-12 row">
        <InputText class="form-control col-12" type="password"
                   @bind-Value="_userEditCntx.ConfirmPassword" placeholder="powtórz hasło" />
        <ValidationMessage For="@(() => _userEditCntx.ConfirmPassword)" />
    </div>
    <div class="col-12 row">
        <span class="col-12"></span>
        <br />
        <input type="submit" class="form-control col-6 btn btn-primary" disabled="@_formInvalid" value="Rejestruj" />
        <a href="/" class="col-4">Wróć</a>
    </div>

</EditForm>


@code {
    private string displaySummary = "display:none";
    private EditContext _editContext;
    private User _userEditCntx = new User();
    private bool _formInvalid = true;

    private User user;
    public string LoginMessage { get; set; }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_userEditCntx);
        _editContext.OnFieldChanged += HandleFieldChanged;
    }

    protected override Task OnInitializedAsync()
    {
        user = new User();
        return base.OnInitializedAsync();
    }
    private async Task<bool> RegisterUser()
    {

        displaySummary = "display:block";
        user = _userEditCntx;
        user.IsActive = false;
        user.LastEditDate = DateTime.Now;
        user.RoleId = 3;

        var returnedUser = await userService.RegisterUserAsync(user);

        if (returnedUser.UserEmailAddress != null)
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();
            NavigationManager.NavigateTo("/afterCreateAccountInformation");
        }
        else
        {

            NavigationManager.NavigateTo("/loginDuplicate");
            return await Task.FromResult(false);
        }
        return await Task.FromResult(true);
    }


    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        _formInvalid = !_editContext.Validate();
        StateHasChanged();

    }
    public void Dispose()
    {
        _editContext.OnFieldChanged -= HandleFieldChanged;
    }

}
