@page "/"
@using Newtonsoft.Json
@using SGNWebAppCli.Services
@using SGNWebAppCli.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUserService userService
@implements IDisposable
<EditForm Model="@user" OnValidSubmit="@ValidateUser">
    <div>
        <h3 style="font-weight:bold; color:Highlight">Logowanie</h3>
    </div>
    <div>
        <br />
    </div>
    <div class="col-12 row">
        <input class="form-control col-12" @bind="user.UserEmailAddress" placeholder="email" />
    </div>
    <br />
    <div class="col-12 row">
        <input class="form-control col-12" type="password" @bind="user.UserPassword" placeholder="hasło" maxlength="20" />
    </div>
    <div class="col-12 row">
        <span class="col-12"></span>
        <br />
        <input type="submit" class="form-control col-6 btn btn-primary" value="Zaloguj" />
        <a href="/signup" class="col-4">Dodaj użytkownika</a>
    </div>
    <br />
    <div class="col-12 row" style="text-align:left;font-weight:bold">
        <span class="col-12" style="color:red">@LoginMessage</span>
    </div>
</EditForm>


@code {
    private User user;
    public string LoginMessage { get; set; } = String.Empty;
    protected override Task OnInitializedAsync()
    {
        user = new User();
        return base.OnInitializedAsync();
    }

    private async Task<bool> ValidateUser()
    {

        var returnedUser = await userService.LoginAsync(user);

        if (returnedUser.UserEmailAddress != null)
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(returnedUser);
            NavigationManager.NavigateTo("/index");
        }
        else
        {
            user.UserPassword = "";
            LoginMessage = "Niepoprawny login lub hasło";
        }
        user.UserPassword = string.Empty;
        return await Task.FromResult(true);
    }

    public void Dispose()
    {
        Console.WriteLine("Login page - Disposed");
    }
}
