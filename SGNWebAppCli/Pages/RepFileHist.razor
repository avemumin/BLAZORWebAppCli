@page "/repfilehist"
@inject IReportSerivce<FileHistory> reportService
@implements IDisposable
@*@if (rfhList == null)
    {
        <LoadingData DisplayMessage="false"></LoadingData>
    }
    else if (rfhList.Count == 0)
    {
        <text> Brak danych do wyświetlenia </text>
    }
    else
    { }*@
@if (rfhList != null)
{
    <GridView Items="rfhList">
        <GridColumns>
            <GridColumn ColumnTitle="ID"></GridColumn>
            <GridColumn ColumnTitle="Nazwa pliku"></GridColumn>
            <GridColumn ColumnTitle="Powodzenie"></GridColumn>
            <GridColumn ColumnTitle="Opis błędu"></GridColumn>
            <GridColumn ColumnTitle="Data"></GridColumn>
            <GridColumn ColumnTitle="Id zliczenia"></GridColumn>
        </GridColumns>
        <GridRow Context="rfh">
            <td><b>@rfh.IdFileHistory</b> </td>
            <td><b>@rfh.FileName</b> </td>
            <td><b>@rfh.IsProceededSuccess</b> </td>
            <td><b>@rfh.ErrorDescription</b> </td>
            <td><b>@rfh.ProcessDate</b> </td>
            <td><b>@rfh.IdCountResult</b> </td>
        </GridRow>
    </GridView>
  
}

@code {
    public FileHistory rfh { get; set; }
    public List<FileHistory> rfhList { get; set; }

    protected override void OnInitialized()
    {
        rfh = new FileHistory();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await LoadData();
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadData()
    {
        rfhList = await reportService.GetAllAsync("ReportFilesHistory/");
        StateHasChanged();
    }
    public void Dispose()
    {
        Console.WriteLine("Heport File History - Dispose");
    }
}
