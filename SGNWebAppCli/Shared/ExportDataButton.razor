
@using System.Globalization
@using System.IO
@using CsvHelper
@inject IJSRuntime JS
@typeparam TItem

@if (ButtonVisibility)
{
    <br />
    <div class="col-3">
        <button type="button" class="btn btn-success" @onclick="@(() => DisplayQuestion = !DisplayQuestion)">@ExecutionTitleHeader</button>

    </div>
    <Confirmation @ref="confirmation"
                  DisplayConfirmation="DisplayQuestion"
                  onCancel="onCancel"
                  onSave="onConfirm"
                  UserDeclaredFileName="@FileName"
                  Title="Czy chcesz zapisać dane do pliku ?">
        <div>
            <input class="form-control" type="text" placeholder="podaj nazwę pliku (opcjonalne)" @bind="@ExportedFileName" style="width:250px;height:25px" />
            <RadzenRadioButtonList @bind-Value="IsCsv"
                                   TValue="int"
                                   Change="@((args) => Change(args, "zmieniono"))">
                <Items>
                    <RadzenRadioButtonListItem Text="csv" Value="1" />
                    <RadzenRadioButtonListItem Text="pdf" Value="2" />
                </Items>
            </RadzenRadioButtonList>
        </div>
    </Confirmation>
}
@code {
    [Parameter] public bool ButtonVisibility { get; set; } = false;
    [Parameter] public string ExecutionTitleHeader { get; set; }
    [Parameter] public List<TItem> ExportedCollectionName { get; set; }
    [Parameter] public string DefaultFileName { get; set; }
    [Parameter] public EventCallback onClicked { get; set; }


    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    public string ExportedFileName { get; set; } = String.Empty;
    //public string Type { get; set; }
    private int IsCsv { get; set; } = 1;
    public bool DisplayQuestion { get; set; } = false;
    Confirmation confirmation;



    void onCancel()
    {
        DisplayQuestion = false;

        confirmation.Hide();
    }

    void onConfirm()
    {
        DisplayQuestion = false;
        confirmation.Hide();
        ExecuteExport();
        ExportedFileName = string.Empty;
    }
    private string FileExtension
    {
        get => IsCsv.Equals(1) ? ".csv" : ".pdf";
    }


    private void ExecuteExport()
    {
        switch (IsCsv)
        {
            case 1:
                ExportToCsv();
                break;
            case 2:
                ExportToPdf();
                break;
            default:
                break;
        }
    }
    private string FileName
    {
        get
        {
            if (string.IsNullOrEmpty(ExportedFileName))
                return DefaultFileName + " " + DateTime.Now;
            return ExportedFileName;
        }
    }

 


    void Change(int? value, string name)
    {
        events.Add(DateTime.Now, $"{name} zostala zmieniona na {value}");
    }

    private async void ExportToPdf()
    {
        if (ExportedCollectionName is List<FileHistory>)
        {
            var rpt = new RptPdf<FileHistory>();
            await JS.ToPdfFile(string.Concat(FileName, FileExtension), rpt.Report(ExportedCollectionName as List<FileHistory>, ExecutionTitleHeader));
        }
        else if (ExportedCollectionName is List<QualityDetail>)
        {
            var rpt = new RptPdf<QualityDetail>();
            await JS.ToPdfFile(string.Concat(FileName, FileExtension), rpt.Report(ExportedCollectionName as List<QualityDetail>, ExecutionTitleHeader));
        }
    }

    private async void ExportToCsv()
    {
        if (!ExtensionMethods.IsCollectionEmptyOrNull(ExportedCollectionName))
            return;
        using (var memoryStream = new MemoryStream())
        {
            using (var writer = new StreamWriter(memoryStream))
            {
                using (var csv = new CsvWriter(writer, CultureInfo.CurrentCulture))
                {
                    csv.WriteRecords(ExportedCollectionName);
                }
                var arr = memoryStream.ToArray();
                await JS.ToCsVFile(string.Concat(FileName, FileExtension), arr);
            }
        }
    }


}
